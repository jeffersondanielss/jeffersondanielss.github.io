<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jefferson Daniel</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>jeffersondanielss.github.io/</link>
    <atom:link href="jeffersondanielss.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 Jan 2016 19:53:39 -0200</pubDate>
    <lastBuildDate>Sat, 02 Jan 2016 19:53:39 -0200</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Immediately-invoked function expression</title>
        <description>&lt;h1 id=&quot;iife&quot;&gt;IIFE&lt;/h1&gt;

&lt;p&gt;O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor &lt;strong&gt;como uma variável pode receber um valor de uma IIFE&lt;/strong&gt; temos que entender antes alguns conceitos.
O primeiro deles é como funciona a &lt;strong&gt;IIFE&lt;/strong&gt;, que será a nossa função que retorna um valor, após isso temos que entender como funciona o &lt;strong&gt;Variable assignment&lt;/strong&gt; que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.&lt;/p&gt;

&lt;h3 id=&quot;iffe-funo-auto-executvel&quot;&gt;IFFE (função auto executável)&lt;/h3&gt;

&lt;p&gt;A função no javascript na sua sintax mais básica como: &lt;strong&gt;function functionName(){ /* code */ }&lt;/strong&gt;, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
(function (){
  /* code */
})();
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Algumas formas de criar uma IIFE:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
(function(){ /* code */ }());
(function(){ /* code */ })();
new function(){ /* code */ }();
var fn = function(){ /* code */ }();
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;variable-assignment&quot;&gt;Variable Assignment&lt;/h3&gt;

&lt;p&gt;É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
// Função anônima atribuída a uma variável
var soma = function( num1, num2 ){
  return num1 + num2;
};

var operacao = function adicao( num1, num2 ){
  return num1 + num2;
};

soma( 5, 5 ); // 10
adicao( 10, 10 ); // adicao is not defined
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Legal, mas porque eu deveria aprender isso?&lt;/p&gt;

&lt;h3 id=&quot;escopo&quot;&gt;Escopo&lt;/h3&gt;
&lt;p&gt;As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
(function(){
  var element = document.getElementById(&#39;element&#39;);
  console.log( element );  // &amp;lt; div id=&quot;element&quot;&amp;gt;...&amp;lt;/ div&amp;gt;
})();

console.log( element );  // element is not defined
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;conflitos-de-libs&quot;&gt;Conflitos de libs&lt;/h3&gt;
&lt;p&gt;Como muitas libs usam o &lt;strong&gt;$&lt;/strong&gt; e é comum haver conflitos, apesar de ter outras alternativas como o &lt;strong&gt;noConflict()&lt;/strong&gt; na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
(function( $j ){
  function facaAlgo() { /* code */ }
  $j(&#39;.element&#39;).click( facaAlgo );
})( jQuery );
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;
&lt;p&gt;Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
(function( doc ){
    var btn = doc.getElementById(&#39;btn&#39;)
      , element = doc.getElementById(&#39;element&#39;);

    btn.addEventListener(&#39;click&#39;, function(){
      element.style.display = &#39;none&#39;;
    }, false);
})( document );
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Com a junção desses dois conceitos, o &lt;strong&gt;Variable Assignment&lt;/strong&gt; e o &lt;strong&gt;IIFE&lt;/strong&gt; podemos criar algo como:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
var operacao = (function(){
  return {
    soma: function( num1, num2 ) {
      return num1 + num2;
    },

    subtracao: function( num1, num2 ) {
      return num1 - num2;
    }
  }
})();
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Nesse exemplo acima temos uma função auto executável anônima atribuída a variável &lt;strong&gt;operacao&lt;/strong&gt;, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com &lt;strong&gt;operacao.soma( 5, 5 )&lt;/strong&gt; por exemplo.
É como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável &lt;strong&gt;operacao&lt;/strong&gt;. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.
Para deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt;
var operacao = (function(){

  // função privada da IIFE
  function soma( num1, num2 ) {
    return num1 + num2;
  }

  // função privada da IIFE
  function subtracao( num1, num2 ) {
    return num1 - num2;
  }

  return {
    soma, // retornando função soma a variável operacao
  }

})();

operacao.soma(5,5) // 10
operacao.subtracao(5,5) // operacao.subtracao is not a function
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;quer-saber-mais-sobre-iife-&quot;&gt;Quer saber mais sobre IIFE ?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot;&gt;IIFE - benalman &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/&quot;&gt;Sobre funções imediatas JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function&quot;&gt;Every Possible Way to Define a Javascript Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 20 Dec 2015 20:00:28 -0200</pubDate>
        <link>jeffersondanielss.github.io/iife/</link>
        <guid isPermaLink="true">jeffersondanielss.github.io/iife/</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Hello world</title>
        <description>&lt;p&gt;Oláá, aqui nasce o primeiro post :), Já vou começar com um cliche:&lt;/p&gt;

&lt;h4 id=&quot;ensinado-que-se-aprende&quot;&gt;“É ensinado que se aprende.”&lt;/h4&gt;

&lt;p&gt;A algum tempo atraz começei a fazer o &lt;a href=&quot;http://dagora.net/be-mean&quot; target=&quot;_blank&quot;&gt;Be-mean&lt;/a&gt;, um curso sobre full-stack em javascript. E no meio do percurso tinha como tarefa fazer um artigo sobre variáveis, dai veio a vontade de escrever um pouco mais para compartilhar o que venho aprendendo ai nesses dois anos como desenvolvedor front-end, não é muito tempo mas já é um começo.&lt;/p&gt;

&lt;p&gt;Pretendo postar aqui na maioria das vezes coisas sobre javascript que é o que mais venho estudando comprando livros e tal, mas provavelmente ira ter posts sobre outros assuntos.
Sem mais delongas..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s go!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 21:47:00 -0200</pubDate>
        <link>jeffersondanielss.github.io/hello-world/</link>
        <guid isPermaLink="true">jeffersondanielss.github.io/hello-world/</guid>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
